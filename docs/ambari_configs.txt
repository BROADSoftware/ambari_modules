> AMBARI_CONFIGS    

        This module will allow you to read, define and modify configurations for Hadoop (or others) services managed by Ambari

OPTIONS (= is mandatory):

- ambari_server
        This parameters allow grouping of all Ambari server access related parameters in one dict, this to embed all theses
        parameters in one variable.
        Keys of this dict can be `ambari_url', `username', `password', `validate_certs', `ca_bundle_file'
        [Default: None]

= ambari_url
        The Ambari base URL to access Ambari API. Same host:port as the Ambari Admin GUI. Typically
        http://myambari.server.com:8080 or https://myambari.server.com:xxxx
        [Default: None]

- ca_bundle_file
        Useful if Ambari connection is using SSL. Allow to specify a CA_BUNDLE file, a file that contains root and intermediate
        certificates to validate the Ambari certificate.
        In its simplest case, it could be a file containing the server certificate in .pem format.
        This file will be looked up on the remote system, on which this module will be executed.
        [Default: None]

- operation
        `get' Retrieve current configuration values for type
        `set' Set (or remove) some configuration values for type
        `list' Retrieve all existing configuration types, with version
        (Choices: set, get, list)[Default: set]

= password
        The password associated with the username
        [Default: None]

- removed
        A list of configuration key which must NOT be present in the configuration
        [Default: None]
        type: list

- type
        Configuration type, such as 'kafka-broker', or 'hdfs-site' .
        Required when (operation != 'list')
        [Default: None]

= username
        The user name to log on Ambari.
        [Default: None]

- validate_certs
        Useful if Ambari connection is using SSL. If no, SSL certificates will not be validated. This should only be used on
        personally controlled sites using self-signed certificates.
        [Default: True]

- values
        A map of of configuration values. See examples below
        Required when (operation == 'set')
        [Default: None]


AUTHOR: Serge ALEXANDRE

EXAMPLES:
- name: Set kafka-broker configuration
    ambari_configs:
      ambari_url: "http://sr1.hdp16:8080"
      username: admin
      password: admin
      operation: set
      type: kafka-broker
      values:
        auto.create.topics.enable: "false"
        log.retention.hours: 220
    no_log: true

  # To display current configuration values for a configuration type
  - name: Get kafka-broker configuration
    ambari_configs:
      ambari_url: "http://sr1.hdp16:8080"
      username: admin
      password: admin
      operation: get
      type: kafka-broker
    no_log: true
    register: kafkaBrokerConfig

  - debug: var=kafkaBrokerConfig

  # To display all available configuration type
  - name: Get configuration type list (And current versions)
    ambari_configs:
      ambari_url: "http://sr1.hdp16:8080"
      username: admin
      password: admin
      operation: list
    no_log: true
    register: typeList
    
  - debug: var=typeList

# Configuration map can also be a variable
- hosts: sr1
  vars:
    brokerConfig:
      auto.create.topics.enable: "false"
      log.retention.hours: 168
  tasks:
  - name: Set another kafka-broker configuration
    ambari_configs:
      ambari_url: "http://sr1.hdp16:8080"
      username: admin
      password: admin
      operation: set
      type: kafka-broker
      values: "{{ brokerConfig }}"
    no_log: true  

# Or a plain string (Take care of quotes). 
  - name: Set kafka-broker configuration
    ambari_configs:
      ambari_url: "http://sr1.hdp16:8080"
      username: admin
      password: admin
      operation: set
      type: kafka-broker
      values: '{ "log.retention.hours": "220" }'
    no_log: true

RETURN VALUES:


types:
  description: Return a dict of configuration type as key and version as unique value
  returned: When (operation == 'list') and success
  type: dict
  sample:  "types": {
            "kafka-broker": {
                "version": 4
            },
            "kafka-env": {
                "version": 2
            },
            "kafka-log4j": {
                "version": 2
            },
            "livy-conf": {
                "version": 2
            },            
            ....
          }

type:
  description: Return the provided configuration type, for reference
  returned: When ((operation == 'get') or (operantion == 'set)) and success
  type: string
  sample: kafka-broker

config: 
  description: Return a dict of configuration value for the provided type
  returned: when (operation == 'get') and success
  type: dict
  sample: "config": {
             "auto.create.topics.enable": "false",
             "auto.leader.rebalance.enable": "true",
             "compression.type": "producer",
             "controlled.shutdown.enable": "true",
             "controlled.shutdown.max.retries": "3",
             "controlled.shutdown.retry.backoff.ms": "5000",
             "controller.message.queue.size": "10",
             ....
          }

